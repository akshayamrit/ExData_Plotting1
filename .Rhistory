library(devtools)
install.packages("slidify")
search()
install_github("slidify","ramnathv")
install_github("slidify","ramnathv")
install_github(slidify','ramnathv')
install_github('slidify','ramnathv')
library(devtools)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
search()
library(slidify)
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
clear()
m <- matrix(rnorm(25,10), nrow = 5,ncol = 5)
m
solve(m)
library("matlib")
library(matlib)
install.packages("matlib")
matlib::inv(m) == solve(m)
matlib::inv(m)
solve(m)
library(xlsx)
fun(libname, pkgname)
library(openxlsx)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_211')
library(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
Sys.setenv(JAVA_HOME="C:\Program Files (x86)\Java\jre1.8.0_211")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_211")
find.java()
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
library(datasets)
hist(airquality$Ozone)
?bg
??bg
library(datasets)
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
?with
?plot
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
# Plot 2
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Converting rows to appropriate format
powConsumption$Date <- as.Date(powConsumption$Date, "%d/%m/%Y")
library(dplyr)
## Creating new column to contain both date and time
powConsumption <- powConsumption %>% mutate(Date_Time = paste(Date, Time))
powConsumption$Date_Time <- strptime(powConsumption$Date_Time, "%Y-%m-%d %H:%M:%S")
## Creating plot
with(powConsumption, plot(Date_Time, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)"))
## Copying created histogram to png file
dev.copy(device = png, filename = 'Plot2.png', width = 480, height = 480)
dev.off()
setwd("~/datasciencecoursera/Exploratory Data Analysis/ExData_Plotting1")
dev.copy(device = png, filename = 'Plot2.png', width = 480, height = 480)
dev.off()
dev.off()
with(powConsumption, plot(Date_Time, sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, plot(Date_Time, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, plot(Date_Time, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, plot(Date_Time, Sub_metering_1))
with(powConsumption, plot(Date_Time, Sub_metering_2, col = "red"))
dev.cur()
dev.off()
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "n", xlab = "l", ylab = "Energy sub metering"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "l"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(Data_Time, Sub_metering_1, type = "l"))
with(powConsumption, points(Date_Time, Sub_metering_1, type = "l"))
with(powConsumption, points(Date_Time, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(Date_Time, Sub_metering_3, type = "l", col = "blue"))
?par
>legend
?legend
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(device = png, filename = 'Plot3.png', width = 480, height = 480)
dev.off()
with(powConsumption, plot(Date_Time, Voltage, type = "l", xlab = "datetime", ylab = "Voltage"))
# Plot 3
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Converting rows to appropriate format
powConsumption$Date <- as.Date(powConsumption$Date, "%d/%m/%Y")
library(dplyr)
## Creating new column to contain both date and time
powConsumption <- powConsumption %>% mutate(datetime = paste(Date, Time))
powConsumption$datetime <- strptime(powConsumption$datetime, "%Y-%m-%d %H:%M:%S")
## Creating plot
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(datetime, Sub_metering_1, type = "l"))
with(powConsumption, points(datetime, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(datetime, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Copying created histogram to png file
dev.copy(device = png, filename = 'Plot3.png', width = 480, height = 480)
dev.off()
View(powConsumption)
?par
par(mfrow = c(2,2), mar = c(5,4,2,1))
with(powConsumption, plot(datetime, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power"))
with(powConsumption, plot(datetime, Voltage, type = "l"))
with(powConsumption, plot(Date_Time, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = Energy sub metering))
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(datetime, Sub_metering_1, type = "l"))
with(powConsumption, points(datetime, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(datetime, Sub_metering_3, type = "l", col = "blue"))
?legend
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), border = "White")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty = "n")
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(datetime, Sub_metering_1, type = "l"))
with(powConsumption, points(datetime, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(datetime, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty = "n")
dev.off()
## Adding graph 1
with(powConsumption, plot(datetime, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power"))
## Adding graph 2
with(powConsumption, plot(datetime, Voltage, type = "l"))
## Adding graph 3
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(datetime, Sub_metering_1, type = "l"))
with(powConsumption, points(datetime, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(datetime, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty = "n")
par(mfrow = c(2,2), mar = c(5,4,2,1))
## Adding graph 1
with(powConsumption, plot(datetime, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power"))
## Adding graph 2
with(powConsumption, plot(datetime, Voltage, type = "l"))
## Adding graph 3
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(datetime, Sub_metering_1, type = "l"))
with(powConsumption, points(datetime, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(datetime, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty = "n")
with(powConsumption, plot(datetime, Global_reactive_power, type = "l"))
# Plot 4
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Converting rows to appropriate format
powConsumption$Date <- as.Date(powConsumption$Date, "%d/%m/%Y")
library(dplyr)
## Creating new column to contain both date and time
powConsumption <- powConsumption %>% mutate(datetime = paste(Date, Time))
powConsumption$datetime <- strptime(powConsumption$datetime, "%Y-%m-%d %H:%M:%S")
## Creating grid for 4 graphs
par(mfrow = c(2,2), mar = c(5,4,2,1))
## Adding graph 1
with(powConsumption, plot(datetime, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power"))
## Adding graph 2
with(powConsumption, plot(datetime, Voltage, type = "l"))
## Adding graph 3
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, points(datetime, Sub_metering_1, type = "l"))
with(powConsumption, points(datetime, Sub_metering_2, type = "l", col = "red"))
with(powConsumption, points(datetime, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty = "n")
## Adding graph 4
with(powConsumption, plot(datetime, Global_reactive_power, type = "l"))
## Copying created plot to png file
dev.copy(device = png, filename = 'Plot4.png', width = 480, height = 480)
dev.off()
library(dataMaid)
?makeDataReport
makeDataReport(data = powConsumption, output = "html", mode = "summarize", file = "powConsumption.Rmd", replace = TRUE, codebook = TRUE, reportTitle = "Data Dictionary- powConsumption", standAlone = TRUE, )
?lines
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(powConsumption$datetime, powConsumption$Sub_metering_1)
dev.off()
# Plot 1
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Creating histogram for Global Active Power
hist(powConsumption$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red")
## Copying created plot to png file
dev.copy(device = png, filename = 'Plot1.png', width = 480, height = 480)
dev.off()
# Plot 2
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Converting rows to appropriate format
powConsumption$Date <- as.Date(powConsumption$Date, "%d/%m/%Y")
library(dplyr)
## Creating new column to contain both date and time
powConsumption <- powConsumption %>% mutate(datetime = paste(Date, Time))
powConsumption$datetime <- strptime(powConsumption$datetime, "%Y-%m-%d %H:%M:%S")
## Creating plot
with(powConsumption, plot(datetime, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)"))
## Copying created plot to png file
dev.copy(device = png, filename = 'Plot2.png', width = 480, height = 480)
dev.off()
# Plot 3
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Converting rows to appropriate format
powConsumption$Date <- as.Date(powConsumption$Date, "%d/%m/%Y")
library(dplyr)
## Creating new column to contain both date and time
powConsumption <- powConsumption %>% mutate(datetime = paste(Date, Time))
powConsumption$datetime <- strptime(powConsumption$datetime, "%Y-%m-%d %H:%M:%S")
## Creating plot
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, lines(datetime, Sub_metering_1))
with(powConsumption, lines(datetime, Sub_metering_2, col = "red"))
with(powConsumption, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Copying created plot to png file
dev.copy(device = png, filename = 'Plot3.png', width = 480, height = 480)
dev.off()
# Plot 4
## Load data for 2 days
powConsumption <- read.table(file = "~/household_power_consumption.txt",
sep = ";",
skip = grep("^[1-2]/2/2007", readLines("~/household_power_consumption.txt"))-1,
nrows = 2880)
## Naming columns
colnames(powConsumption) <- colnames(read.table(file = "~/household_power_consumption.txt", sep = ";", nrows = 1, header = T))
## Converting rows to appropriate format
powConsumption$Date <- as.Date(powConsumption$Date, "%d/%m/%Y")
library(dplyr)
## Creating new column to contain both date and time
powConsumption <- powConsumption %>% mutate(datetime = paste(Date, Time))
powConsumption$datetime <- strptime(powConsumption$datetime, "%Y-%m-%d %H:%M:%S")
## Creating grid for 4 graphs
par(mfrow = c(2,2), mar = c(5,4,2,1))
## Adding graph 1
with(powConsumption, plot(datetime, Global_active_power, type = "l", xlab = "", ylab = "Global Active Power"))
## Adding graph 2
with(powConsumption, plot(datetime, Voltage, type = "l"))
## Adding graph 3
with(powConsumption, plot(datetime, Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering"))
with(powConsumption, lines(datetime, Sub_metering_1))
with(powConsumption, lines(datetime, Sub_metering_2, col = "red"))
with(powConsumption, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty = "n")
## Adding graph 4
with(powConsumption, plot(datetime, Global_reactive_power, type = "l"))
## Copying created plot to png file
dev.copy(device = png, filename = 'Plot4.png', width = 480, height = 480)
dev.off()
meanFunc <- function() {
x <- rnorm(100)
mean(x)
}
meanFunc()
